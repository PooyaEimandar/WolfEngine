/*
	Project			 : Wolf Engine. Copyright(c) Pooya Eimandar (https://PooyaEimandar.github.io) . All rights reserved.
	Source			 : Please direct any bug to https://github.com/WolfEngine/Wolf.Engine/issues
	Website			 : https://WolfEngine.App
	Name			 : w_graphics_header.h
	Description		 : The include header for graphics devices. Wolf.Engine supports two render APIs, the first one is DirectX 12 
						which supports both Windows 10 and Universal Windows Platform(UWP) and the second one is Vulkan which supports
						Windows, Linux, Android and OSX/IOS(with MoltenVK)  
	Comment          :
*/

#pragma once

#ifdef __DX12__

#include <wrl.h>
#include <d3d12.h>
#include <dxgi1_4.h>
#include <DirectXMath.h>

using Microsoft::WRL::ComPtr;

#elif defined (__VULKAN__) 
	#ifdef __WIN32
		#ifndef VK_USE_PLATFORM_WIN32_KHR
			#define VK_USE_PLATFORM_WIN32_KHR
		#endif
	#elif defined(__linux) && !defined(__ANDROID)
		#ifndef VK_USE_PLATFORM_XCB_KHR
			#define VK_USE_PLATFORM_XCB_KHR
		#endif
	#endif

    #if defined(__iOS__) || defined(__APPLE__)

#ifdef __iOS__
        #ifndef VK_USE_PLATFORM_IOS_MVK
            #define VK_USE_PLATFORM_IOS_MVK
        #endif
#else
        #ifndef VK_USE_PLATFORM_MACOS_MVK
            #define VK_USE_PLATFORM_MACOS_MVK
        #endif
#endif

        #include <vulkan/vulkan.h>
        #include <unistd.h>

	#elif defined(__ANDROID)
		#include "vk_android/vulkan_wrapper.h"
	#else
		#include <vulkan/vulkan.hpp>
	#endif
#endif

#if defined(__linux) ||  defined(__APPLE__) || defined(__ANDROID)
#include <w_std.h>
#endif

#ifdef __VULKAN__
#define DEFAULT_FENCE_TIMEOUT 1000000000
#endif

namespace wolf
{
	namespace render
	{
		namespace vulkan
		{
			enum w_shader_stage_flag_bits
			{
				VERTEX_SHADER = VK_SHADER_STAGE_VERTEX_BIT,

#if defined(__DX12__) || defined(__DX11__)
				HULL_SHADER,
				DOMAIN_SHADER,
				PIXEL_SHADER,
#elif defined(__VULKAN__)
				TESSELATION_CONTROL = VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
				TESSELATION_EVALUATION = VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
				FRAGMENT_SHADER = VK_SHADER_STAGE_FRAGMENT_BIT,
#endif

				GEOMETRY_SHADER = VK_SHADER_STAGE_GEOMETRY_BIT,
				COMPUTE_SHADER = VK_SHADER_STAGE_COMPUTE_BIT
			};

			typedef enum w_polygon_mode
			{
#ifdef __VULKAN__
				FILL = VK_POLYGON_MODE_FILL,
				LINE = VK_POLYGON_MODE_LINE,
				POINT = VK_POLYGON_MODE_POINT,
				FILL_RECTANGLE_NV = VK_POLYGON_MODE_FILL_RECTANGLE_NV,
				POLYGON_MODE_BEGIN_RANGE = VK_POLYGON_MODE_BEGIN_RANGE,
				POLYGON_MODE_END_RANGE = VK_POLYGON_MODE_END_RANGE,
				POLYGON_MODE_RANGE_SIZE = VK_POLYGON_MODE_RANGE_SIZE,
				POLYGON_MODE_MAX_ENUM = VK_POLYGON_MODE_MAX_ENUM
#endif
			} w_polygon_mode;

			typedef enum w_cull_mode_flag_bits
			{
#ifdef __VULKAN__
				NONE = VK_CULL_MODE_NONE,
				FRONT_BIT = VK_CULL_MODE_FRONT_BIT,
				BACK_BIT = VK_CULL_MODE_BACK_BIT,
				FRONT_AND_BACK = VK_CULL_MODE_FRONT_AND_BACK,
				CULL_MODE_FLAG_BITS_MAX_ENUM = VK_CULL_MODE_FLAG_BITS_MAX_ENUM
#endif
			} w_cull_mode_flag_bits;

			typedef enum w_front_face
			{
#ifdef __VULKAN__
				COUNTER_CLOCKWISE = VK_FRONT_FACE_COUNTER_CLOCKWISE,
				CLOCKWISE = VK_FRONT_FACE_CLOCKWISE,
				FRONT_FACE_BEGIN_RANGE = VK_FRONT_FACE_BEGIN_RANGE,
				FRONT_FACE_END_RANGE = VK_FRONT_FACE_END_RANGE,
				FRONT_FACE_RANGE_SIZE = VK_FRONT_FACE_RANGE_SIZE,
				FRONT_FACE_MAX_ENUM = VK_FRONT_FACE_MAX_ENUM
#endif
			} w_front_face;


			typedef enum w_memory_property_flag_bits
			{
#ifdef __VULKAN__
				DEVICE_LOCAL_BIT = VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
				HOST_VISIBLE_BIT = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
				HOST_COHERENT_BIT = VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
				HOST_CACHED_BIT = VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
				LAZILY_ALLOCATED_BIT = VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
				MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM
#endif
			} w_memory_property_flag_bits;

			struct w_descriptor_set
			{
#ifdef __VULKAN__
				VkDescriptorSet handle = 0;
#endif
			};

			struct w_descriptor_set_layout
			{
#ifdef __VULKAN__
				VkDescriptorSetLayout handle = 0;
#endif
			};

			struct w_buffer_handle
			{
#ifdef __VULKAN__
				VkBuffer handle = 0;
#endif
			};

			struct w_frame_buffer_handle
			{
#ifdef __VULKAN__
				VkFramebuffer handle = 0;
#endif
			};

			struct w_render_pass_handle
			{
#ifdef __VULKAN__
				VkRenderPass handle = 0;
#endif
			};

			struct w_device_memory
			{
#ifdef __VULKAN__
				VkDeviceMemory handle = 0;
#endif
			};

			struct w_attachment_description :
#ifdef __VULKAN__
				public VkAttachmentDescription
#endif
			{
			};

			struct w_attachment_reference :
#ifdef __VULKAN__
				public VkAttachmentReference
#endif
			{
			};

			struct w_draw_indexed_indirect_command :
#ifdef __VULKAN__
				public VkDrawIndexedIndirectCommand
#endif
			{
			};

			struct w_push_constant_range :
#ifdef __VULKAN__
				public VkPushConstantRange
#endif
			{
				uint32_t get_shader_stage_flags() const { return this->stageFlags; }
				void set_shader_stage_flags(_In_ const uint32_t& pValue) { this->stageFlags = pValue; }

				uint32_t get_offset() { return this->offset; }
				void set_offset(_In_ const uint32_t& pValue) { this->offset = pValue; }

				uint32_t get_size() { return this->size; }
				void set_size(_In_ const uint32_t& pValue) { this->size = pValue; }
			};

			struct w_descriptor_buffer_info :
#ifdef __VULKAN__
				public VkDescriptorBufferInfo
#endif
			{
			};

			struct w_sampler
			{
#ifdef __VULKAN__
				VkSampler handle = nullptr;
#endif
			};

			struct w_descriptor_image_info :
#ifdef __VULKAN__
				public VkDescriptorImageInfo
#endif
			{
			};

			/*
			For Vulkan
			attachment description contains:
			@param flags, Flags
			@param format, Format of an image used for the attachment
			@param samples, Number of samples of the image; The value greater than 1 means multisampling
			@param loadOp, Specifies what to do with the image(s) contents at the beginning of a render pass.
			@param storeOp, Informs the driver what to do with the image(s) content(s) after the render pass.
			@param stencilLoadOp, The same as loadOp but for the stencil part of depth/stencil images, please note that for color attachments this parameter will be ignored
			@param stencilStoreOp, The same as storeOp but for the stencil part of depth/stencil images, please note that for color attachments this parameter will be ignored
			@param initialLayout, The layout of given attachment when the render pass starts
			@param finalLayout, The layout that driver will automatically transite the given image into at the end of a render pass
			attachment reference contains:
			@param attachment, index of attachment
			@param layout, The layout of given attachment
			*/
			struct w_attachment_buffer_desc
			{
				w_attachment_description desc;
				w_attachment_reference ref;
				uint32_t memory_flag = w_memory_property_flag_bits::DEVICE_LOCAL_BIT;

				static w_attachment_buffer_desc create_color_desc_buffer()
				{
					w_attachment_buffer_desc _buffer_desc = {};

					//init description
					_buffer_desc.desc.flags = 0;
					_buffer_desc.desc.format = VkFormat::VK_FORMAT_B8G8R8A8_UNORM;
					_buffer_desc.desc.samples = VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT;
					_buffer_desc.desc.loadOp = VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_CLEAR;
					_buffer_desc.desc.storeOp = VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_STORE;
					_buffer_desc.desc.stencilLoadOp = VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_DONT_CARE;
					_buffer_desc.desc.stencilStoreOp = VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_DONT_CARE;
					_buffer_desc.desc.initialLayout = VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED;
					_buffer_desc.desc.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;

					//init reference
					_buffer_desc.ref.attachment = 0;
					_buffer_desc.ref.layout = VkImageLayout::VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

					return _buffer_desc;
				}

				static w_attachment_buffer_desc create_depth_desc_buffer()
				{
					w_attachment_buffer_desc _buffer_desc = {};

					_buffer_desc.desc.flags = 0;
					_buffer_desc.desc.format = VkFormat::VK_FORMAT_D32_SFLOAT_S8_UINT;
					_buffer_desc.desc.samples = VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT;
					_buffer_desc.desc.loadOp = VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_CLEAR;
					_buffer_desc.desc.storeOp = VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_STORE;
					_buffer_desc.desc.stencilLoadOp = VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_DONT_CARE;
					_buffer_desc.desc.stencilStoreOp = VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_DONT_CARE;
					_buffer_desc.desc.initialLayout = VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED;
					_buffer_desc.desc.finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;

					//init reference
					_buffer_desc.ref.attachment = 1;
					_buffer_desc.ref.layout = VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;

					return _buffer_desc;
				}
			};

			struct w_image_view
			{
#ifdef __VULKAN__
				VkImage                             image = 0;
				VkImageView                         view = 0;
#endif

				uint32_t							width = 0;
				uint32_t							height = 0;
				w_attachment_buffer_desc			attachment_desc;
			};

			struct w_pipeline_layout_create_info :
#ifdef __VULKAN__
				VkPipelineLayoutCreateInfo
#endif
			{
			};

			struct w_pipeline_vertex_input_state_create_info :
#ifdef __VULKAN__
				VkPipelineVertexInputStateCreateInfo
#endif
			{
			};

			struct w_pipeline_input_assembly_state_create_info :
#ifdef __VULKAN__
				VkPipelineInputAssemblyStateCreateInfo
#endif
			{
			};

			struct w_pipeline_rasterization_state_create_info :
#ifdef __VULKAN__
				public VkPipelineRasterizationStateCreateInfo
#endif
			{
				w_polygon_mode get_polygon_mode() const { return (w_polygon_mode)this->polygonMode; }
				void set_polygon_mode(_In_ const w_polygon_mode& pValue) { this->polygonMode = (VkPolygonMode)pValue; }

				w_cull_mode_flag_bits get_cull_mode() { return (w_cull_mode_flag_bits)this->cullMode; }
				void set_cull_mode(_In_ const w_cull_mode_flag_bits& pValue) { this->cullMode = (VkCullModeFlagBits)pValue; }

				w_front_face get_front_face() { return (w_front_face)this->frontFace; }
				void set_front_face(_In_ const w_front_face& pValue) { this->frontFace = (VkFrontFace)pValue; }
			};

			struct w_pipeline_multisample_state_create_info :
#ifdef __VULKAN__
				public VkPipelineMultisampleStateCreateInfo
#endif
			{
			};

			struct w_pipeline_color_blend_attachment_state :
#ifdef __VULKAN__
				public VkPipelineColorBlendAttachmentState
#endif
			{
			};

			typedef enum w_command_buffer_level
			{
#ifdef __VULKAN__
				PRIMARY = VK_COMMAND_BUFFER_LEVEL_PRIMARY,
				SECONDARY = VK_COMMAND_BUFFER_LEVEL_SECONDARY
#endif
			} w_command_buffer_level;

			typedef enum w_subpass_contents 
			{
#ifdef __VULKAN__
				INLINE = VK_SUBPASS_CONTENTS_INLINE,
				SECONDARY_COMMAND_BUFFERS = VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
#endif
			} w_subpass_contents;

			typedef enum w_command_buffer_usage_flag_bits
			{
#ifdef __VULKAN__
				ONE_TIME_SUBMIT_BIT = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
				RENDER_PASS_CONTINUE_BIT = VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
				SIMULTANEOUS_USE_BIT = VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT
#endif
			} w_command_buffer_usage_flag_bits;

			typedef enum w_pipeline_stage_flag_bits
			{
#ifdef __VULKAN__
				TOP_OF_PIPE_BIT = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
				DRAW_INDIRECT_BIT = VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
				VERTEX_INPUT_BIT = VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
				VERTEX_SHADER_BIT = VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
				TESSELLATION_CONTROL_SHADER_BIT = VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
				TESSELLATION_EVALUATION_SHADER_BIT = VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
				GEOMETRY_SHADER_BIT = VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
				FRAGMENT_SHADER_BIT = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
				EARLY_FRAGMENT_TESTS_BIT = VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
				LATE_FRAGMENT_TESTS_BIT = VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
				COLOR_ATTACHMENT_OUTPUT_BIT = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
				COMPUTE_SHADER_BIT = VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
				TRANSFER_BIT = VK_PIPELINE_STAGE_TRANSFER_BIT,
				BOTTOM_OF_PIPE_BIT = VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
				HOST_BIT = VK_PIPELINE_STAGE_HOST_BIT,
				ALL_GRAPHICS_BIT = VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
				ALL_COMMANDS_BIT = VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
				COMMAND_PROCESS_BIT_NVX = VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX,
				PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM
#endif
			} w_pipeline_stage_flag_bits;

			typedef enum w_dynamic_state
			{
#ifdef __VULKAN__
				VIEWPORT = VK_DYNAMIC_STATE_VIEWPORT,
				SCISSOR = VK_DYNAMIC_STATE_SCISSOR,
				LINE_WIDTH = VK_DYNAMIC_STATE_LINE_WIDTH,
				DEPTH_BIAS = VK_DYNAMIC_STATE_DEPTH_BIAS,
				BLEND_CONSTANTS = VK_DYNAMIC_STATE_BLEND_CONSTANTS,
				DEPTH_BOUNDS = VK_DYNAMIC_STATE_DEPTH_BOUNDS,
				STENCIL_COMPARE_MASK = VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
				STENCIL_WRITE_MASK = VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
				STENCIL_REFERENCE = VK_DYNAMIC_STATE_STENCIL_REFERENCE,
				VIEWPORT_W_SCALING_NV = VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
				DISCARD_RECTANGLE_EXT = VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
				SAMPLE_LOCATIONS_EXT = VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
				DYNAMIC_STATE_BEGIN_RANGE = VK_DYNAMIC_STATE_BEGIN_RANGE,
				DYNAMIC_STATE_END_RANGE = VK_DYNAMIC_STATE_END_RANGE,
				DYNAMIC_STATE_RANGE_SIZE = VK_DYNAMIC_STATE_RANGE_SIZE,
				DYNAMIC_STATE_MAX_ENUM = VK_DYNAMIC_STATE_MAX_ENUM
#endif
			} w_dynamic_state;

			typedef enum w_pipeline_bind_point
			{
#ifdef __VULKAN__
				GRAPHICS = VK_PIPELINE_BIND_POINT_GRAPHICS,
				COMPUTE = VK_PIPELINE_BIND_POINT_COMPUTE,
				PIPELINE_BIND_POINT_BEGIN_RANGE = VK_PIPELINE_BIND_POINT_GRAPHICS,
				PIPELINE_BIND_POINT_END_RANGE = VK_PIPELINE_BIND_POINT_COMPUTE,
				PIPELINE_BIND_POINT_RANGE_SIZE = (VK_PIPELINE_BIND_POINT_COMPUTE - VK_PIPELINE_BIND_POINT_GRAPHICS + 1),
				PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
#endif
			} w_pipeline_bind_point;

			typedef enum w_primitive_topology
			{
#ifdef __VULKAN__
				POINT_LIST = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
				LINE_LIST = VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
				LINE_STRIP = VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
				TRIANGLE_LIST = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
				TRIANGLE_STRIP = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
				TRIANGLE_FAN = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
				LINE_LIST_WITH_ADJACENCY = VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
				LINE_STRIP_WITH_ADJACENCY = VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
				TRIANGLE_LIST_WITH_ADJACENCY = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
				TRIANGLE_STRIP_WITH_ADJACENCY = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
				PATCH_LIST = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
				PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE,
				PRIMITIVE_TOPOLOGY_END_RANGE = VK_PRIMITIVE_TOPOLOGY_END_RANGE,
				PRIMITIVE_TOPOLOGY_RANGE_SIZE = VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE,
				PRIMITIVE_TOPOLOGY_MAX_ENUM = VK_PRIMITIVE_TOPOLOGY_MAX_ENUM
#endif
			} w_primitive_topology;

			typedef enum w_image_view_type
			{
#ifdef __VULKAN__
				_1D = VK_IMAGE_VIEW_TYPE_1D,
				_2D = VK_IMAGE_VIEW_TYPE_2D,
				_3D = VK_IMAGE_VIEW_TYPE_3D,
				CUBE = VK_IMAGE_VIEW_TYPE_CUBE,
				_1D_ARRAY = VK_IMAGE_VIEW_TYPE_1D_ARRAY,
				_2D_ARRAY = VK_IMAGE_VIEW_TYPE_2D_ARRAY,
				CUBE_ARRAY = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
				IMAGE_VIEW_TYPE_BEGIN_RANGE = VK_IMAGE_VIEW_TYPE_BEGIN_RANGE,
				IMAGE_VIEW_TYPE_END_RANGE = VK_IMAGE_VIEW_TYPE_END_RANGE,
				IMAGE_VIEW_TYPE_RANGE_SIZE = VK_IMAGE_VIEW_TYPE_RANGE_SIZE,
				IMAGE_VIEW_TYPE_MAX_ENUM = VK_IMAGE_VIEW_TYPE_MAX_ENUM
#endif
			} w_image_view_type;

			typedef enum w_format
			{
#ifdef __VULKAN__
				UNDEFINED = VK_FORMAT_UNDEFINED,
				R4G4_UNORM_PACK8 = VK_FORMAT_R4G4_UNORM_PACK8,
				R4G4B4A4_UNORM_PACK16 = VK_FORMAT_R4G4B4A4_UNORM_PACK16,
				B4G4R4A4_UNORM_PACK16 = VK_FORMAT_B4G4R4A4_UNORM_PACK16,
				R5G6B5_UNORM_PACK16 = VK_FORMAT_R5G6B5_UNORM_PACK16,
				B5G6R5_UNORM_PACK16 = VK_FORMAT_B5G6R5_UNORM_PACK16,
				R5G5B5A1_UNORM_PACK16 = VK_FORMAT_R5G5B5A1_UNORM_PACK16,
				B5G5R5A1_UNORM_PACK16 = VK_FORMAT_B5G5R5A1_UNORM_PACK16,
				A1R5G5B5_UNORM_PACK16 = VK_FORMAT_A1R5G5B5_UNORM_PACK16,
				R8_UNORM = VK_FORMAT_R8_UNORM,
				R8_SNORM = VK_FORMAT_R8_SNORM,
				R8_USCALED = VK_FORMAT_R8_USCALED,
				R8_SSCALED = VK_FORMAT_R8_SSCALED,
				R8_UINT = VK_FORMAT_R8_UINT,
				R8_SINT = VK_FORMAT_R8_SINT,
				R8_SRGB = VK_FORMAT_R8_SRGB,
				R8G8_UNORM = VK_FORMAT_R8G8_UNORM,
				R8G8_SNORM = VK_FORMAT_R8G8_SNORM,
				R8G8_USCALED = VK_FORMAT_R8G8_USCALED,
				R8G8_SSCALED = VK_FORMAT_R8G8_SSCALED,
				R8G8_UINT = VK_FORMAT_R8G8_UINT,
				R8G8_SINT = VK_FORMAT_R8G8_SINT,
				R8G8_SRGB = VK_FORMAT_R8G8_SRGB,
				R8G8B8_UNORM = VK_FORMAT_R8G8B8_UNORM,
				R8G8B8_SNORM = VK_FORMAT_R8G8B8_SNORM,
				R8G8B8_USCALED = VK_FORMAT_R8G8B8_USCALED,
				R8G8B8_SSCALED = VK_FORMAT_R8G8B8_SSCALED,
				R8G8B8_UINT = VK_FORMAT_R8G8B8_UINT,
				R8G8B8_SINT = VK_FORMAT_R8G8B8_SINT,
				R8G8B8_SRGB = VK_FORMAT_R8G8B8_SRGB,
				B8G8R8_UNORM = VK_FORMAT_B8G8R8_UNORM,
				B8G8R8_SNORM = VK_FORMAT_B8G8R8_SNORM,
				B8G8R8_USCALED = VK_FORMAT_B8G8R8_USCALED,
				B8G8R8_SSCALED = VK_FORMAT_B8G8R8_SSCALED,
				B8G8R8_UINT = VK_FORMAT_B8G8R8_UINT,
				B8G8R8_SINT = VK_FORMAT_B8G8R8_SINT,
				B8G8R8_SRGB = VK_FORMAT_B8G8R8_SRGB,
				R8G8B8A8_UNORM = VK_FORMAT_R8G8B8A8_UNORM,
				R8G8B8A8_SNORM = VK_FORMAT_R8G8B8A8_SNORM,
				R8G8B8A8_USCALED = VK_FORMAT_R8G8B8A8_USCALED,
				R8G8B8A8_SSCALED = VK_FORMAT_R8G8B8A8_SSCALED,
				R8G8B8A8_UINT = VK_FORMAT_R8G8B8A8_UINT,
				R8G8B8A8_SINT = VK_FORMAT_R8G8B8A8_SINT,
				R8G8B8A8_SRGB = VK_FORMAT_R8G8B8A8_SRGB,
				B8G8R8A8_UNORM = VK_FORMAT_B8G8R8A8_UNORM,
				B8G8R8A8_SNORM = VK_FORMAT_B8G8R8A8_SNORM,
				B8G8R8A8_USCALED = VK_FORMAT_B8G8R8A8_USCALED,
				B8G8R8A8_SSCALED = VK_FORMAT_B8G8R8A8_SSCALED,
				B8G8R8A8_UINT = VK_FORMAT_B8G8R8A8_UINT,
				B8G8R8A8_SINT = VK_FORMAT_B8G8R8A8_SINT,
				B8G8R8A8_SRGB = VK_FORMAT_B8G8R8A8_SRGB,
				A8B8G8R8_UNORM_PACK32 = VK_FORMAT_A8B8G8R8_UNORM_PACK32,
				A8B8G8R8_SNORM_PACK32 = VK_FORMAT_A8B8G8R8_SNORM_PACK32,
				A8B8G8R8_USCALED_PACK32 = VK_FORMAT_A8B8G8R8_USCALED_PACK32,
				A8B8G8R8_SSCALED_PACK32 = VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
				A8B8G8R8_UINT_PACK32 = VK_FORMAT_A8B8G8R8_UINT_PACK32,
				A8B8G8R8_SINT_PACK32 = VK_FORMAT_A8B8G8R8_SINT_PACK32,
				A8B8G8R8_SRGB_PACK32 = VK_FORMAT_A8B8G8R8_SRGB_PACK32,
				A2R10G10B10_UNORM_PACK32 = VK_FORMAT_A2R10G10B10_UNORM_PACK32,
				A2R10G10B10_SNORM_PACK32 = VK_FORMAT_A2R10G10B10_SNORM_PACK32,
				A2R10G10B10_USCALED_PACK32 = VK_FORMAT_A2R10G10B10_USCALED_PACK32,
				A2R10G10B10_SSCALED_PACK32 = VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
				A2R10G10B10_UINT_PACK32 = VK_FORMAT_A2R10G10B10_UINT_PACK32,
				A2R10G10B10_SINT_PACK32 = VK_FORMAT_A2R10G10B10_SINT_PACK32,
				A2B10G10R10_UNORM_PACK32 = VK_FORMAT_A2B10G10R10_UNORM_PACK32,
				A2B10G10R10_SNORM_PACK32 = VK_FORMAT_A2B10G10R10_SNORM_PACK32,
				A2B10G10R10_USCALED_PACK32 = VK_FORMAT_A2B10G10R10_USCALED_PACK32,
				A2B10G10R10_SSCALED_PACK32 = VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
				A2B10G10R10_UINT_PACK32 = VK_FORMAT_A2B10G10R10_UINT_PACK32,
				A2B10G10R10_SINT_PACK32 = VK_FORMAT_A2B10G10R10_SINT_PACK32,
				R16_UNORM = VK_FORMAT_R16_UNORM,
				R16_SNORM = VK_FORMAT_R16_SNORM,
				R16_USCALED = VK_FORMAT_R16_USCALED,
				R16_SSCALED = VK_FORMAT_R16_SSCALED,
				R16_UINT = VK_FORMAT_R16_UINT,
				R16_SINT = VK_FORMAT_R16_SINT,
				R16_SFLOAT = VK_FORMAT_R16_SFLOAT,
				R16G16_UNORM = VK_FORMAT_R16G16_UNORM,
				R16G16_SNORM = VK_FORMAT_R16G16_SNORM,
				R16G16_USCALED = VK_FORMAT_R16G16_USCALED,
				R16G16_SSCALED = VK_FORMAT_R16G16_SSCALED,
				R16G16_UINT = VK_FORMAT_R16G16_UINT,
				R16G16_SINT = VK_FORMAT_R16G16_SINT,
				R16G16_SFLOAT = VK_FORMAT_R16G16_SFLOAT,
				R16G16B16_UNORM = VK_FORMAT_R16G16B16_UNORM,
				R16G16B16_SNORM = VK_FORMAT_R16G16B16_SNORM,
				R16G16B16_USCALED = VK_FORMAT_R16G16B16_USCALED,
				R16G16B16_SSCALED = VK_FORMAT_R16G16B16_SSCALED,
				R16G16B16_UINT = VK_FORMAT_R16G16B16_UINT,
				R16G16B16_SINT = VK_FORMAT_R16G16B16_SINT,
				R16G16B16_SFLOAT = VK_FORMAT_R16G16B16_SFLOAT,
				R16G16B16A16_UNORM = VK_FORMAT_R16G16B16A16_UNORM,
				R16G16B16A16_SNORM = VK_FORMAT_R16G16B16A16_SNORM,
				R16G16B16A16_USCALED = VK_FORMAT_R16G16B16A16_USCALED,
				R16G16B16A16_SSCALED = VK_FORMAT_R16G16B16A16_SSCALED,
				R16G16B16A16_UINT = VK_FORMAT_R16G16B16A16_UINT,
				R16G16B16A16_SINT = VK_FORMAT_R16G16B16A16_SINT,
				R16G16B16A16_SFLOAT = VK_FORMAT_R16G16B16A16_SFLOAT,
				R32_UINT = VK_FORMAT_R32_UINT,
				R32_SINT = VK_FORMAT_R32_SINT,
				R32_SFLOAT = VK_FORMAT_R32_SFLOAT,
				R32G32_UINT = VK_FORMAT_R32G32_UINT,
				R32G32_SINT = VK_FORMAT_R32G32_SINT,
				R32G32_SFLOAT = VK_FORMAT_R32G32_SFLOAT,
				R32G32B32_UINT = VK_FORMAT_R32G32B32_UINT,
				R32G32B32_SINT = VK_FORMAT_R32G32B32_SINT,
				R32G32B32_SFLOAT = VK_FORMAT_R32G32B32_SFLOAT,
				R32G32B32A32_UINT = VK_FORMAT_R32G32B32A32_UINT,
				R32G32B32A32_SINT = VK_FORMAT_R32G32B32A32_SINT,
				R32G32B32A32_SFLOAT = VK_FORMAT_R32G32B32A32_SFLOAT,
				R64_UINT = VK_FORMAT_R64_UINT,
				R64_SINT = VK_FORMAT_R64_SINT,
				R64_SFLOAT = VK_FORMAT_R64_SFLOAT,
				R64G64_UINT = VK_FORMAT_R64G64_UINT,
				R64G64_SINT = VK_FORMAT_R64G64_SINT,
				R64G64_SFLOAT = VK_FORMAT_R64G64_SFLOAT,
				R64G64B64_UINT = VK_FORMAT_R64G64B64_UINT,
				R64G64B64_SINT = VK_FORMAT_R64G64B64_SINT,
				R64G64B64_SFLOAT = VK_FORMAT_R64G64B64_SFLOAT,
				R64G64B64A64_UINT = VK_FORMAT_R64G64B64A64_UINT,
				R64G64B64A64_SINT = VK_FORMAT_R64G64B64A64_SINT,
				R64G64B64A64_SFLOAT = VK_FORMAT_R64G64B64A64_SFLOAT,
				B10G11R11_UFLOAT_PACK32 = VK_FORMAT_B10G11R11_UFLOAT_PACK32,
				E5B9G9R9_UFLOAT_PACK32 = VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
				D16_UNORM = VK_FORMAT_D16_UNORM,
				X8_D24_UNORM_PACK32 = VK_FORMAT_X8_D24_UNORM_PACK32,
				D32_SFLOAT = VK_FORMAT_D32_SFLOAT,
				S8_UINT = VK_FORMAT_S8_UINT,
				D16_UNORM_S8_UINT = VK_FORMAT_D16_UNORM_S8_UINT,
				D24_UNORM_S8_UINT = VK_FORMAT_D24_UNORM_S8_UINT,
				D32_SFLOAT_S8_UINT = VK_FORMAT_D32_SFLOAT_S8_UINT,
				BC1_RGB_UNORM_BLOCK = VK_FORMAT_BC1_RGB_UNORM_BLOCK,
				BC1_RGB_SRGB_BLOCK = VK_FORMAT_BC1_RGB_SRGB_BLOCK,
				BC1_RGBA_UNORM_BLOCK = VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
				BC1_RGBA_SRGB_BLOCK = VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
				BC2_UNORM_BLOCK = VK_FORMAT_BC2_UNORM_BLOCK,
				BC2_SRGB_BLOCK = VK_FORMAT_BC2_SRGB_BLOCK,
				BC3_UNORM_BLOCK = VK_FORMAT_BC3_UNORM_BLOCK,
				BC3_SRGB_BLOCK = VK_FORMAT_BC3_SRGB_BLOCK,
				BC4_UNORM_BLOCK = VK_FORMAT_BC4_UNORM_BLOCK,
				BC4_SNORM_BLOCK = VK_FORMAT_BC4_SNORM_BLOCK,
				BC5_UNORM_BLOCK = VK_FORMAT_BC5_UNORM_BLOCK,
				BC5_SNORM_BLOCK = VK_FORMAT_BC5_SNORM_BLOCK,
				BC6H_UFLOAT_BLOCK = VK_FORMAT_BC6H_UFLOAT_BLOCK,
				BC6H_SFLOAT_BLOCK = VK_FORMAT_BC6H_SFLOAT_BLOCK,
				BC7_UNORM_BLOCK = VK_FORMAT_BC7_UNORM_BLOCK,
				BC7_SRGB_BLOCK = VK_FORMAT_BC7_SRGB_BLOCK,
				ETC2_R8G8B8_UNORM_BLOCK = VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
				ETC2_R8G8B8_SRGB_BLOCK = VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
				ETC2_R8G8B8A1_UNORM_BLOCK = VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
				ETC2_R8G8B8A1_SRGB_BLOCK = VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
				ETC2_R8G8B8A8_UNORM_BLOCK = VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
				ETC2_R8G8B8A8_SRGB_BLOCK = VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
				EAC_R11_UNORM_BLOCK = VK_FORMAT_EAC_R11_UNORM_BLOCK,
				EAC_R11_SNORM_BLOCK = VK_FORMAT_EAC_R11_SNORM_BLOCK,
				EAC_R11G11_UNORM_BLOCK = VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
				EAC_R11G11_SNORM_BLOCK = VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
				ASTC_4x4_UNORM_BLOCK = VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
				ASTC_4x4_SRGB_BLOCK = VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
				ASTC_5x4_UNORM_BLOCK = VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
				ASTC_5x4_SRGB_BLOCK = VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
				ASTC_5x5_UNORM_BLOCK = VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
				ASTC_5x5_SRGB_BLOCK = VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
				ASTC_6x5_UNORM_BLOCK = VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
				ASTC_6x5_SRGB_BLOCK = VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
				ASTC_6x6_UNORM_BLOCK = VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
				ASTC_6x6_SRGB_BLOCK = VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
				ASTC_8x5_UNORM_BLOCK = VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
				ASTC_8x5_SRGB_BLOCK = VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
				ASTC_8x6_UNORM_BLOCK = VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
				ASTC_8x6_SRGB_BLOCK = VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
				ASTC_8x8_UNORM_BLOCK = VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
				ASTC_8x8_SRGB_BLOCK = VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
				ASTC_10x5_UNORM_BLOCK = VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
				ASTC_10x5_SRGB_BLOCK = VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
				ASTC_10x6_UNORM_BLOCK = VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
				ASTC_10x6_SRGB_BLOCK = VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
				ASTC_10x8_UNORM_BLOCK = VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
				ASTC_10x8_SRGB_BLOCK = VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
				ASTC_10x10_UNORM_BLOCK = VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
				ASTC_10x10_SRGB_BLOCK = VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
				ASTC_12x10_UNORM_BLOCK = VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
				ASTC_12x10_SRGB_BLOCK = VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
				ASTC_12x12_UNORM_BLOCK = VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
				ASTC_12x12_SRGB_BLOCK = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
				PVRTC1_2BPP_UNORM_BLOCK_IMG = VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
				PVRTC1_4BPP_UNORM_BLOCK_IMG = VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
				PVRTC2_2BPP_UNORM_BLOCK_IMG = VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
				PVRTC2_4BPP_UNORM_BLOCK_IMG = VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
				PVRTC1_2BPP_SRGB_BLOCK_IMG = VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
				PVRTC1_4BPP_SRGB_BLOCK_IMG = VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
				PVRTC2_2BPP_SRGB_BLOCK_IMG = VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
				PVRTC2_4BPP_SRGB_BLOCK_IMG = VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
				G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
				B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
				G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
				G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
				G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
				G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
				G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
				R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16_KHR,
				R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
				R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
				G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
				B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
				G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
				G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
				G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
				G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
				G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
				R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16_KHR,
				R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
				R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
				G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
				B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
				G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
				G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
				G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
				G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
				G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
				G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
				B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
				G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
				G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
				G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
				G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
				G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
				FORMAT_BEGIN_RANGE = VK_FORMAT_UNDEFINED,
				FORMAT_END_RANGE = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
				FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1),
				FORMAT_MAX_ENUM = VK_FORMAT_MAX_ENUM
#endif
			} w_format;

			typedef enum w_image_type
			{
#ifdef __VULKAN__
				_1D_TYPE = VK_IMAGE_TYPE_1D,
				_2D_TYPE = VK_IMAGE_TYPE_2D,
				_3D_TYPE = VK_IMAGE_TYPE_3D,
				IMAGE_TYPE_BEGIN_RANGE = VK_IMAGE_TYPE_BEGIN_RANGE,
				IMAGE_TYPE_END_RANGE = VK_IMAGE_TYPE_END_RANGE,
				IMAGE_TYPE_RANGE_SIZE = VK_IMAGE_TYPE_RANGE_SIZE,
				IMAGE_TYPE_MAX_ENUM = VK_IMAGE_TYPE_MAX_ENUM
#endif
			} w_image_type;

			typedef enum w_image_usage_flag_bits
			{
#ifdef __VULKAN__
				IMAGE_USAGE_TRANSFER_SRC_BIT = VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
				IMAGE_USAGE_TRANSFER_DST_BIT = VK_IMAGE_USAGE_TRANSFER_DST_BIT,
				IMAGE_USAGE_SAMPLED_BIT = VK_IMAGE_USAGE_SAMPLED_BIT,
				IMAGE_USAGE_STORAGE_BIT = VK_IMAGE_USAGE_STORAGE_BIT,
				IMAGE_USAGE_COLOR_ATTACHMENT_BIT = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
				IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
				IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
				IMAGE_USAGE_INPUT_ATTACHMENT_BIT = VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
				IMAGE_USAGE_FLAG_BITS_MAX_ENUM = VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM
#endif
			} w_image_usage_flag_bits;

			typedef enum w_buffer_usage_flag_bits
			{
#ifdef __VULKAN__
				BUFFER_USAGE_TRANSFER_SRC_BIT = VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
				BUFFER_USAGE_TRANSFER_DST_BIT = VK_BUFFER_USAGE_TRANSFER_DST_BIT,
				BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
				BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
				BUFFER_USAGE_UNIFORM_BUFFER_BIT = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
				BUFFER_USAGE_STORAGE_BUFFER_BIT = VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
				BUFFER_USAGE_INDEX_BUFFER_BIT = VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
				BUFFER_USAGE_VERTEX_BUFFER_BIT = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
				BUFFER_USAGE_INDIRECT_BUFFER_BIT = VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
				BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
#endif
			} w_buffer_usage_flag_bits;
		}
	}
}

