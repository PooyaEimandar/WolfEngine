#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define MAX_LOD_LEVEL  1

struct instance_data 
{
	vec4	pos;
};

// instances buffer
layout (binding = 0, std140) buffer Instances 
{
   instance_data instances[];
};

// VkDrawIndexedIndirectCommand's layout
struct indexed_indirect_command 
{
	uint	index_count;
	uint	instance_count;
	uint	first_index;
	uint	vertex_offset;
	uint	first_instance;
};

// multi draw output
layout (binding = 1, std430) writeonly buffer IndirectDraws
{
	indexed_indirect_command indirect_draws[];
};

// Matrices
layout (binding = 2) uniform UBO_In
{
	vec4	camera_pos;
	vec4	is_visible;
} i_ubo;

// indirect draw stats
layout (binding = 3) buffer UBO_Out
{
	uint draw_count;
	uint lod_count[MAX_LOD_LEVEL + 1];
} o_ubo;

// Level Of Detail information
struct LOD
{
	uint	first_index;
	uint	index_count;
	float	distance;
	float	padding;
};
layout (binding = 4) readonly buffer LODs
{
	LOD lods[];
};

layout (local_size_x = 4) in;

void main()
{
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	
	//clear stats on first invocation
	if (idx == 0)
	{
		atomicExchange(o_ubo.draw_count, 0);
		for (uint i = 0; i < MAX_LOD_LEVEL + 1; i++)
		{
			atomicExchange(o_ubo.lod_count[i], 0);
		}
	}

	if (i_ubo.is_visible[idx] != 0)
	{
		indirect_draws[idx].instance_count = 1;
		
		// Increase number of indirect draw counts
		atomicAdd(o_ubo.draw_count, 1);
		
		// Select appropriate LOD level based on distance to camera
		uint _lod_level = MAX_LOD_LEVEL;
		for (uint i = 0; i < MAX_LOD_LEVEL; i++)
		{
			if (distance(instances[idx].pos.xyz, i_ubo.camera_pos.xyz) <= lods[i].distance) 
			{
				_lod_level = i;
				break;
			}
		}
		indirect_draws[idx].first_index = lods[_lod_level].first_index;
		indirect_draws[idx].index_count = lods[_lod_level].index_count;
		
		// Update stats
		atomicAdd(o_ubo.lod_count[_lod_level], 1);
	}
	else
	{
		indirect_draws[idx].instance_count = 0;
	}
}