/* automatically generated by rust-bindgen 0.61.0 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const W_MAX_PATH: u32 = 260;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_openal_t {
    _unused: [u8; 0],
}
pub type w_openal = *mut w_openal_t;
pub type w_openal_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " returns all devices"]
    #[doc = " @param p_output_devices, the ffmpeg AVFrame"]
    #[doc = " @param p_input_devices, the pixel format of ffmpeg AVFrame"]
    pub fn w_openal_list_all_devices(
        p_output_devices: *mut ::std::os::raw::c_char,
        p_input_devices: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " initialize the openal object"]
    #[doc = " @param p_openal, an object"]
    #[doc = " @param p_format, the format of sound"]
    #[doc = " @param p_sample_rate, the sample rate"]
    #[doc = " @param p_refresh, the refresh rate"]
    #[doc = " @param p_number_of_channels, the number of channels"]
    #[doc = " @param p_error, the error buffer"]
    #[doc = " returns zero on success"]
    pub fn w_openal_init(
        p_openal: *mut w_openal,
        p_format: ::std::os::raw::c_int,
        p_sample_rate: ::std::os::raw::c_int,
        p_refresh: ::std::os::raw::c_int,
        p_number_of_channels: ::std::os::raw::c_int,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " open the openal"]
    #[doc = " @param p_openal, an openal object"]
    #[doc = " @param p_error, the error buffer"]
    #[doc = " @returns zero on success"]
    pub fn w_openal_open(
        p_openal: w_openal,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " update the openal"]
    #[doc = " @param p_openal, an openal object"]
    #[doc = " @param p_audio_frame_buffer, the audio frame buffer"]
    #[doc = " @param p_audio_frame_buffer_len, the length of audio frame buffer"]
    #[doc = " @param p_error, the error buffer"]
    #[doc = " @returns zero on success"]
    pub fn w_openal_update_i16(
        p_openal: w_openal,
        p_audio_frame_buffer: *const i16,
        p_audio_frame_buffer_len: usize,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " reset the openal"]
    #[doc = " @param p_openal, an openal object"]
    #[doc = " @returns void"]
    pub fn w_openal_reset(p_openal: w_openal);
}
extern "C" {
    #[doc = " close the openal"]
    #[doc = " @param p_openal, an openal object"]
    #[doc = " @param p_force_close, force to close"]
    #[doc = " @returns void"]
    pub fn w_openal_close(p_openal: w_openal, p_force_close: bool);
}
extern "C" {
    #[doc = " release resources of openal"]
    #[doc = " @param p_openal, the openal object"]
    pub fn w_openal_fini(p_openal: *mut w_openal);
}
