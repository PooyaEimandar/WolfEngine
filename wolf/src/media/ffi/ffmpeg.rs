/* automatically generated by rust-bindgen 0.60.1 */

pub const W_MAX_PATH: u32 = 260;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const w_ffmpeg_action_W_ENCODE: w_ffmpeg_action = 0;
pub const w_ffmpeg_action_W_DECODE: w_ffmpeg_action = 1;
pub type w_ffmpeg_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_ffmpeg_ctx_t {
    _unused: [u8; 0],
}
pub type w_ffmpeg_ctx = *mut w_ffmpeg_ctx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_ffmpeg_opt_t {
    pub fps: ::std::os::raw::c_int,
    pub width: i64,
    pub height: i64,
    pub bitrate: i64,
    pub codec_id: ::std::os::raw::c_int,
    pub preset: ::std::os::raw::c_int,
    pub crf: ::std::os::raw::c_int,
    pub type_: w_ffmpeg_action,
    pub ctx: w_ffmpeg_ctx,
}
#[test]
fn bindgen_test_layout_w_ffmpeg_opt_t() {
    assert_eq!(
        ::std::mem::size_of::<w_ffmpeg_opt_t>(),
        56usize,
        concat!("Size of: ", stringify!(w_ffmpeg_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<w_ffmpeg_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(w_ffmpeg_opt_t))
    );
    fn test_field_fps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fps) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(fps)
            )
        );
    }
    test_field_fps();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_bitrate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(bitrate)
            )
        );
    }
    test_field_bitrate();
    fn test_field_codec_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).codec_id) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(codec_id)
            )
        );
    }
    test_field_codec_id();
    fn test_field_preset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preset) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(preset)
            )
        );
    }
    test_field_preset();
    fn test_field_crf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crf) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(crf)
            )
        );
    }
    test_field_crf();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_ctx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<w_ffmpeg_opt_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(w_ffmpeg_opt_t),
                "::",
                stringify!(ctx)
            )
        );
    }
    test_field_ctx();
}
pub type w_ffmpeg_opt = *mut w_ffmpeg_opt_t;
extern "C" {
    #[doc = " initialize ffmpeg"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_init(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " encode the frame"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_data_in the input rgb buffer"]
    #[doc = " @param p_data_out the output encoded buffer"]
    #[doc = " @param p_size_out the size of encoded buffer"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_encode(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_data_in: *mut u8,
        p_data_out: *mut *mut u8,
        p_size_out: *mut ::std::os::raw::c_int,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " decode the frame"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_data_in the input decode data"]
    #[doc = " @param p_data_size the size of input decode data"]
    #[doc = " @param p_data_out the output buffer containing the decoded data"]
    #[doc = " @param p_size_out the size of decoded buffer"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_decode(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_data_in: *mut u8,
        p_data_size: ::std::os::raw::c_int,
        p_data_out: *mut *mut u8,
        p_size_out: *mut ::std::os::raw::c_int,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " encode the frame"]
    #[doc = " @param p_ffmpeg_ctx the ffmpeg parameters"]
    #[doc = " @param p_error the error buffer"]
    pub fn w_ffmpeg_fini(p_ffmpeg_opt: w_ffmpeg_opt);
}
